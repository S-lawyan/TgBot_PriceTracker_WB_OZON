import logging
import re
from datetime import datetime

from aiogram import Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State
from aiogram.dispatcher.filters.state import StatesGroup

from bot.create_bot import bot
from bot.create_bot import db
from bot.create_bot import dp
from bot.create_bot import PASSWORD
from bot.create_bot import selen
from keyboards.client_kb import *


class ClientStates(StatesGroup):
    get_passwd = State()
    get_position_list = State()
    which_store = State()
    await_react = State()
    get_source = State()


# @dp.message_handler(commands=['start'])
async def command_start(message: types.Message, state: FSMContext):
    flag = await db.check_user(user_id=message.from_user.id)
    if flag is False:
        sent_message = await message.answer(
            text="–ú–æ–π —Ö–æ–∑—è–∏–Ω –∑–∞–ø—Ä–µ—â–∞–µ—Ç –º–Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏ üòí\n",
            reply_markup=kb_password,
        )
        async with state.proxy() as data:
            data["sent_message"] = sent_message
    else:
        await message.answer(
            text="–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–∞—Ä—Ç–∏–∫—É–ª</b> —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞ –Ω–µ–≥–æ",
            reply_markup=await client_kb(),
        )


@dp.callback_query_handler(text=["password"], state=None)
async def click_password(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        sent_message = data["sent_message"]
    await sent_message.edit_text("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å")
    await ClientStates.get_passwd.set()


# ================    –ü–†–ò–ù–ò–ú–ê–ï–ú –ü–ê–†–û–õ–¨ –ò –ü–†–û–í–ï–†–Ø–ï–ú –ï–ì–û   =========================
@dp.message_handler(content_types=types.ContentType.TEXT, state=ClientStates.get_passwd)
async def check_password(message: types.Message, state: FSMContext):
    MSG_PASS = message.text
    if MSG_PASS == PASSWORD:
        await db.save_client(user_id=message.from_user.id)
        await bot.send_message(
            message.from_user.id,
            text="‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π!\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–∞—Ä—Ç–∏–∫—É–ª</b> —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞ –Ω–µ–≥–æ",
            reply_markup=await client_kb(),
        )
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, text="‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π...")


# ===========   –ó–ê–•–í–ê–¢ –í–°–ï–• –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–• –ë–û–¢–£   ============
# @dp.message_handler(content_types=types.ContentType.TEXT, state=None)
async def processing_arcicul(message: types.Message, state: FSMContext):
    USER_LIST = await db.get_all_users()
    if message.from_user.id not in USER_LIST:
        await message.answer("–Ø –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏ üò∂")
        return

    msg = message.text
    articul = None
    source = ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ê–†–¢–ò–ö–£–õ–ê -> –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    if re.match(r"^\d{5,}$", msg):
        articul = msg
        sent_message = await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫", reply_markup=await enter_source_kb(articul)
        )
        async with state.proxy() as data:
            data["sent_message"] = sent_message
        await ClientStates.which_store.set()
        return

    # –û–ë–†–ê–ë–û–¢–ö–ê –°–°–´–õ–û–ö -> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    elif re.match(r"^https?://www\.wildberries\.ru/catalog/\d+", msg):
        match = re.search(r"\d+", msg)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å—Å—ã–ª–∫–∏
        if match:
            articul = match.group()
            source = "wb"
        else:
            await message.reply(
                "–°—Å—ã–ª–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–∞—Ä—Ç–∏–∫—É–ª</b>."
            )
            return

    elif re.match(r"^https?://www\.ozon\.ru/product/.*", msg):
        match = re.search(r"\d{9}", msg)
        if match:
            articul = match.group()
            source = "ozon"
        else:
            await message.reply(
                "–°—Å—ã–ª–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å <b>–∞—Ä—Ç–∏–∫—É–ª</b>."
            )
            return
    else:
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É")
        return

    # ===== –ï–°–õ–ò –í–°–ï –í –ü–û–†–Ø–î–ö–ï, –¢–û –ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ –¢–û–í–ê–†–ê =====

    if articul is not None:
        sent_message = await message.answer("üîé –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞...")
        if source == "wb":
            result = await selen.wb_search_tovar(
                articul=articul, user_id=message.from_user.id
            )
        elif source == "ozon":
            result = await selen.ozon_search_tovar(
                articul=articul, user_id=message.from_user.id
            )
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å—Å—ã–ª–∫–∏"
            )
            return

        if result is None:
            await sent_message.edit_text(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        else:
            result["articul"] = articul
            if result["img"] == b"":
                price = (
                    "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                    if result["price"] == False
                    else str(result["price"]) + " ‚ÇΩ"
                )
                msg_ = f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {result['articul']}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {result['name']}\n<b>–¶–µ–Ω–∞:</b> {price}"
                await sent_message.edit_text(msg_, reply_markup=kb_react)
            else:
                await sent_message.delete()
                price = (
                    "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                    if result["price"] == False
                    else str(result["price"]) + " ‚ÇΩ"
                )
                sent_message = await message.answer_photo(
                    photo=result["img"],
                    caption=f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {result['articul']}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {result['name']}\n<b>–¶–µ–Ω–∞:</b> {price}",
                    reply_markup=kb_react,
                )
            async with state.proxy() as data:
                data["result"] = result
                data["sent_message"] = sent_message
            await ClientStates.await_react.set()


@dp.callback_query_handler(
    text_contains="#", state=ClientStates.which_store
)  # text=['wb, ozon']
async def enter_source(call: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    async with state.proxy() as data:
        sent_message = data["sent_message"]
        await sent_message.delete()

    source, articul = call.data.split("#")

    sent_message = await call.message.answer("üîé –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞...")

    if source == "wb":
        result = await selen.wb_search_tovar(
            articul=articul, user_id=call.message.from_user.id
        )
        source_ = "Wildberries üü£"

    elif source == "ozon":
        result = await selen.ozon_search_tovar(
            articul=articul, user_id=call.message.from_user.id
        )
        source_ = "OZON üîµ"

    else:
        await call.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞"
        )
        await state.finish()
        return

    # ===== –ï–°–õ–ò –í–°–ï –í –ü–û–†–Ø–î–ö–ï, –¢–û –ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ –¢–û–í–ê–†–ê =====

    if result is None:
        await sent_message.edit_text(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.finish()
        return
    else:
        result["articul"] = articul
        if result["img"] == b"":
            price = (
                "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                if result["price"] == False
                else str(result["price"]) + " ‚ÇΩ"
            )
            msg_ = f"{source_}\n<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {result['articul']}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {result['name']}\n<b>–¶–µ–Ω–∞:</b> {price}"
            await sent_message.edit_text(msg_, reply_markup=kb_react)
        else:
            await sent_message.delete()
            price = (
                "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                if result["price"] == False
                else str(result["price"]) + " ‚ÇΩ"
            )
            sent_message = await call.message.answer_photo(
                photo=result["img"],
                caption=f"{source_}\n<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {result['articul']}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {result['name']}\n<b>–¶–µ–Ω–∞:</b> {price}",
                reply_markup=kb_react,
            )
        async with state.proxy() as data:
            data["result"] = result
            data["sent_message"] = sent_message
            data["source"] = source
        await ClientStates.await_react.set()


@dp.callback_query_handler(text=["add_position"], state=ClientStates.await_react)
async def add_position(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        result = data["result"]
        sent_message = data["sent_message"]
        source = data["source"]
    flag = await db.check_position(
        articul=int(result["articul"]), user_id=call.from_user.id, source=source
    )
    if flag is True:
        await bot.send_message(
            call.from_user.id, f"‚ö†Ô∏è–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º —É–∂–µ –µ—Å—Ç—å —Å—Ä–µ–¥–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö"
        )
        await sent_message.edit_reply_markup(reply_markup=None)
        await state.finish()
        return
    else:
        # —Å–æ—Ö—Ä–∞–Ω–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î
        time_now = int(datetime.now().timestamp())
        price = "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" if result["price"] == False else result["price"]
        await db.save_position(
            articul=int(result["articul"]),
            name=result["name"],
            price=price,
            date_time=time_now,
            user_id=call.from_user.id,
            img=result["img"],
            source=source,
        )
        await state.finish()
        await sent_message.edit_reply_markup(reply_markup=None)
        await bot.send_message(call.from_user.id, "‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


@dp.callback_query_handler(text=["cancel"], state="*")
async def registration_new_user(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        sent_message = data["sent_message"]
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await sent_message.edit_reply_markup(reply_markup=None)


@dp.message_handler(commands=["my_positions"])
@dp.message_handler(Text(equals="–º–æ–∏ –ø–æ–∑–∏—Ü–∏–∏", ignore_case=True))
async def my_positions(message: types.Message, state: FSMContext):
    try:
        wb_position_list = await db.get_all_position(
            user_id=message.from_user.id, source="wb"
        )
        ozon_position_list = await db.get_all_position(
            user_id=message.from_user.id, source="ozon"
        )

        if len(wb_position_list) == 0:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Wildberries üü£")
        else:
            msg = "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π Wildberries üü£:\n\n"
            count = 0
            for item in wb_position_list:
                price = (
                    str(item[2]) + " ‚ÇΩ"
                    if str(item[2]) != "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                    else str(item[2])
                )
                msg += f'üî∞  {item[0]}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item[1]}\n<b>–¶–µ–Ω–∞:</b> {price}\n<a href="https://www.wildberries.ru/catalog/{item[0]}/detail.aspx">–°–°–´–õ–ö–ê</a>\n'
                msg += "\n"
                count += 1
                if count == 20:
                    await message.answer(msg)
                    msg = ""
                    count = 0
            if count > 0:
                await message.answer(msg)

        if len(ozon_position_list) == 0:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ OZON üîµ")
        else:
            msg = "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π OZON üîµ:\n\n"
            count = 0
            for item in ozon_position_list:
                price = (
                    str(item[2]) + " ‚ÇΩ"
                    if str(item[2]) != "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                    else str(item[2])
                )
                msg += f'üî∞  {item[0]}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item[1]}\n<b>–¶–µ–Ω–∞:</b> {price}\n<a href="https://www.ozon.ru/product/{item[0]}">–°–°–´–õ–ö–ê</a>\n'
                msg += "\n"
                count += 1
                if count == 20:
                    await message.answer(msg)
                    msg = ""
                    count = 0
            if count > 0:
                await message.answer(msg)

    except Exception as e:
        logging.error(
            f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {e} -- user -- {message.from_user.id}"
        )


@dp.message_handler(commands=["dell_position"])
@dp.message_handler(Text(equals="—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é(–∏)", ignore_case=True))
async def delete_position(message: types.Message, state: FSMContext):
    sent_message = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫", reply_markup=await enter_source_kb(articul="")
    )
    async with state.proxy() as data:
        data["sent_message"] = sent_message
    await ClientStates.get_source.set()


# @dp.message_handler(content_types=types.ContentType.TEXT, state=ClientStates.get_source)
@dp.callback_query_handler(text_contains="#", state=ClientStates.get_source)
async def get_source_for_delete(call: types.CallbackQuery, state: FSMContext):
    source_ = call.data.split("#")[0]
    source = "Wildberries üü£" if source_ == "wb" else "OZON üîµ"
    async with state.proxy() as data:
        sent_message = data["sent_message"]

    await sent_message.edit_reply_markup(reply_markup=None)
    await sent_message.edit_text(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
    position_list = await db.get_all_position(user_id=call.from_user.id, source=source_)
    if len(position_list) == 0:
        await call.message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —ç—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
        await state.finish()
        return

    sent_message = await call.message.answer(
        f"–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ {source}", reply_markup=kb_cancel
    )
    async with state.proxy() as data:
        data["sent_message"] = sent_message
        data["source"] = source_
    await ClientStates.get_position_list.set()


# @dp.message_handler(content_types=types.ContentType.TEXT, state=ClientStates.get_position_list)
async def processing_delete(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        sent_message = data["sent_message"]
        source = data["source"]
    await sent_message.edit_reply_markup(reply_markup=None)
    msg = message.text
    pattern = r"^\d+(,\s*\d+)*$"
    if not re.match(pattern, msg):
        await sent_message.edit_reply_markup(reply_markup=None)
        sent_message = await message.answer(
            "‚ö†Ô∏è–í –∞—Ä—Ç–∏–∫—É–ª–µ(–∞—Ö) –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥", reply_markup=kb_cancel
        )
        async with state.proxy() as data:
            data["sent_message"] = sent_message
        return

    else:
        msg_list = msg.split(",")
        articul_list = [int(x) for x in msg_list]
        deleted_list = ""
        for articul in articul_list:
            flag = await db.check_position(
                articul, user_id=message.from_user.id, source=source
            )
            if flag == False:
                await message.answer(
                    f"‚ö†Ô∏è–¢–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ): {articul}"
                )
                continue
                # async with state.proxy() as data:
                #     data['sent_message'] = sent_message
            else:
                try:
                    await db.dell_position(
                        articul=articul, user_id=message.from_user.id, source=source
                    )
                    deleted_list += str(articul) + " "
                except Exception as e:
                    logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {e} -- {articul}")
                    await message.answer(f"‚ùó –ü–æ–∑–∏—Ü–∏—è <b>{articul}</b> –Ω–µ —É–¥–∞–ª–µ–Ω–∞.")
                    continue
        if deleted_list != "":
            await message.answer(
                f"‚úÖ –°–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã:\n<b>{deleted_list}</b>"
            )
        await state.finish()


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=["start"], state=None)
    dp.register_message_handler(
        processing_arcicul, content_types=types.ContentType.TEXT, state=None
    )
    dp.register_message_handler(
        processing_delete,
        content_types=types.ContentType.TEXT,
        state=ClientStates.get_position_list,
    )
